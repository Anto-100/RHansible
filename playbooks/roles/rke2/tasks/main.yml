---
- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  loop:
    - /etc/rancher/rke2
    - "{{ kubeconfig_path | dirname }}"

- name: Configure RKE2 server
  template:
    src: config.yaml.j2
    dest: /etc/rancher/rke2/config.yaml
    owner: root
    group: root
    mode: 0644
  notify: restart rke2

- name: Download RKE2 installation script
  get_url:
    url: https://get.rke2.io
    dest: /tmp/rke2-install.sh
    mode: 0755

- name: Run RKE2 installer (following official method)
  environment:
    INSTALL_RKE2_VERSION: "{{ rke2_version | default(omit) }}"
    INSTALL_RKE2_CHANNEL: "{{ rke2_channel }}"
    INSTALL_RKE2_TYPE: "{{ rke2_type }}"
    INSTALL_RKE2_METHOD: "{{ rke2_install_method }}"
  command: /tmp/rke2-install.sh
  args:
    creates: /usr/local/bin/rke2
  register: install_result
  changed_when: "'Using installer' in install_result.stdout"

- name: Enable RKE2 service
  systemd:
    name: "rke2-{{ rke2_type }}"
    enabled: yes
    state: started
  register: rke2_service

- name: Wait for RKE2 server manifests directory
  wait_for:
    path: /var/lib/rancher/rke2/server/manifests
    state: present
    timeout: 300
  when: rke2_type == 'server'

- name: Wait for kubeconfig file to be available
  wait_for:
    path: /etc/rancher/rke2/rke2.yaml
    state: present
    timeout: 300
  when: rke2_type == 'server'

- name: Configure kubectl in profile (for easier access)
  copy:
    dest: /etc/profile.d/rke2.sh
    content: |
      export PATH=$PATH:/var/lib/rancher/rke2/bin
      export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    mode: 0644

- name: Copy kubeconfig to user directory for easier access
  copy:
    src: /etc/rancher/rke2/rke2.yaml
    dest: "{{ kubeconfig_path }}"
    remote_src: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0600
  when: rke2_type == 'server'

- name: Wait for RKE2 binaries to be available
  wait_for:
    path: "/var/lib/rancher/rke2/bin/kubectl"
    state: present
    timeout: 300
  when: rke2_type == 'server'

- name: Check if RKE2 binaries exist
  stat:
    path: "/var/lib/rancher/rke2/bin/{{ item }}"
  register: rke2_binaries
  loop:
    - kubectl
    - crictl
    - helm
  when: rke2_type == 'server'

- name: Create symbolic links for RKE2 binaries
  file:
    src: "/var/lib/rancher/rke2/bin/{{ item.item }}"
    dest: "/usr/local/bin/{{ item.item }}"
    state: link
  loop: "{{ rke2_binaries.results }}"
  when: 
    - rke2_type == 'server'
    - item.stat.exists
  ignore_errors: yes

- name: Set KUBECONFIG for subsequent tasks
  set_fact:
    kubeconfig_env: /etc/rancher/rke2/rke2.yaml
  when: rke2_type == 'server'

- name: Wait for API server to be ready
  command: /var/lib/rancher/rke2/bin/kubectl cluster-info
  environment:
    KUBECONFIG: "{{ kubeconfig_env }}"
  register: cluster_info
  retries: 30
  delay: 10
  until: cluster_info.rc == 0
  changed_when: false
  when: rke2_type == 'server'
  ignore_errors: yes  # Add this to continue even if this fails

- name: Wait for node to be ready
  shell: /var/lib/rancher/rke2/bin/kubectl get nodes | grep -w "Ready"
  environment:
    KUBECONFIG: "{{ kubeconfig_env }}"
  register: node_ready
  retries: 30
  delay: 10
  until: node_ready.rc == 0
  changed_when: false
  when: rke2_type == 'server'
  ignore_errors: yes  # Add this to continue even if this fails

- name: Verify installation with kubectl
  shell: /var/lib/rancher/rke2/bin/kubectl get nodes -o wide
  environment:
    KUBECONFIG: "{{ kubeconfig_env }}"
  register: kubectl_nodes
  changed_when: false
  when: rke2_type == 'server'
  ignore_errors: yes  # Add this to continue even if this fails

- name: Display nodes
  debug:
    var: kubectl_nodes.stdout_lines
  when: rke2_type == 'server'

- name: Verify Kubernetes components
  shell: /var/lib/rancher/rke2/bin/kubectl get pods -A
  environment:
    KUBECONFIG: "{{ kubeconfig_env }}"
  register: kubectl_pods
  changed_when: false
  when: rke2_type == 'server'
  ignore_errors: yes  # Add this to continue even if this fails

- name: Display pods
  debug:
    var: kubectl_pods.stdout_lines
  when: rke2_type == 'server'